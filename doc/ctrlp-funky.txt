*ctrlp-funky.txt* *ctrlp-funky*
A ctrlp.vim extension - navigate and jump to function defs
Version: 0.8.4
Author:  Takahiro Yoshihara <https://github.com/tacahiroy>


==============================================================================
CONTENTS					*ctrlp-funky-contents*

Introduction			|ctrlp-funky-intro|
Commands			|ctrlp-funky-commands|
Settings			|ctrlp-funky-settings|
  Filetype Settings		|ctrlp-funky-filtype-settings|
Filter Implementation Guide	|ctrlp-funky-filter-guide|
Thanks				|ctrlp-funky-thanks|
changelog			|ctrlp-funky-changelog|
License				|ctrlp-funky-license|
About				|ctrlp-funky-about|


==============================================================================
INTRODUCTION					*ctrlp-funky-intro*

ctrl-funky is an extension of ctrlp.vim.
This supports following file types:

* c/cpp (C and C++)
* chef (resources)
* go
* html/xhtml
* java
* javascript
* jinja
* lua
* markdown
* nerdtree
* objc (Objective-C)
* perl
* php
* python
* ruby
* sh (bash, dash and zsh)
* yaml
* vb (Visual Basic)
* vim


==============================================================================
COMMANDS					*ctrlp-funky-commands*

This plugin provides a command |:CtrlPFunky|. You just execute it.

						*ctrlp-funky-:CtrlPFunky*
:CtrlPFunky [WORD]
	Abstract lines from a current editing file.
	You can provide an argument for the command. If it's provided you can
	get lines that matches the 'WORD'.
	In fact, the argument will be inputted into the CtrlP buffer by default.

Defining a mapping for this command must be useful. >
	nnoremap <Leader>fu :CtrlPFunky<Cr>
	" Initialise list by a word under cursor
	nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
<


==============================================================================
SETTINGS					*ctrlp-funky-settings*
You can customise behaviour of ctrlp-funky using these variables.

					*'g:ctrlp_funky_after_jump'*
After cursor jumped to your wanted function line, what did you frequently tap
before getting into real work? '|zo|', '|zx|', '|zx||zt|', or '|zv||zz|' etc.
The valid action string consists of two part:
    The first part can be one of  '|zx|', '|zv|', '|zo|' or '|zO|' for setting fold
    view. If |foldenable| if off, then this part has no effect.  The second
    part can be one of '|zt|', '|zz|' for scrolling screen.
Both of they can be '', which means nothing will be done.
The |g:ctrlp_funky_after_jump| can be a single string:
(default: 'zxzz')
>
       let g:ctrlp_funky_after_jump = 'zxzt'
<
which affects all filetypes, or it can be a dictionary as follows:
>
       let g:ctrlp_funky_after_jump = {
            \ 'default' : 'zxzz',
            \ 'python'  : 'zO',
            \ 'cpp'     : 'zxzt',
            \ 'go'      : 'zz',
            \ 'vim'     : '',
       \ }
<
If you want to leave some 'margin' after 'z[tb]', see |scrolloff|.


					*'g:ctrlp_funky_sort_by_mru'*
If this is enabled (=1) the list is sorted by MRU (most recently used).
In short, a function definition what was used last time is appeared on top of
the list.
Note that the MRU feature doesn't work persistently. Therefore if you delete
the buffer or once you quit Vim, order of the list is reset to default.
(default: 0)
>
	let g:ctrlp_funky_sort_by_mru = 1
<


					*'g:ctrlp_funky_syntax_highlight'*
If this is enabled (=1) |syntax-highlighting| feature is enabled in the CtrlP-
buffer. It just sets |filetype| to CtrlP buffer same as the current buffer.
(default: 0)
>
	let g:ctrlp_funky_syntax_highlight = 1
<

FILETYPE SETTINGS			*ctrlp-funky-filetype-settings*
This section describes ctrlp-funky configuration for each filetype.


[chef]					*ctrlp-funky-chef*
					*'g:ctrlp_funky_chef_lwrp'*
Set this to 1 (enabled) the results will include LWRP.
http://docs.opscode.com/lwrp.html#opscode-maintained
(default: 1)
>
	let g:ctrlp_funky_chef_lwrp = 0
<

					*'g:ctrlp_funky_chef_custom_resources'*
You can set Chef resources that you defined to this variable.
The resources which are set to this variable will be picked up by |ctrlp-funky|.
http://docs.opscode.com/resource.html#common-functionality
(default: [])
>
	let g:ctrlp_funky_chef_custom_resources = ['rabbitmq', 'nodejs']
<

[nerdtree]				*ctrlp-funky-nerdtree*
					*'g:ctrlp_funky_nerdtree_include_files'*
Set this to 1 (enabled) the results will include files.
(default: 0)
>
	let g:ctrlp_funky_nerdtree_include_files = 1
<

[php]					*ctrlp-funky-php*
					*'g:ctrlp_funky_php_requires'*
Set this to 1 (enabled) the results will include 'require' and
'require_once' lines.
(default: 0)
>
	let g:ctrlp_funky_php_requires = 1
<

					*'g:ctrlp_funky_php_includes'*
Set this to 1 (enabled) the results will include 'include' and
'include_once' lines.
(default: 0)
>
	let g:ctrlp_funky_php_include = 1
<

[ruby]					*ctrlp-funky-ruby*
					*'g:ctrlp_funky_ruby_requires'*
Set this to 1 (enabled) the results will include 'require' and
'require_relative' lines.
(default: 0)
>
	let g:ctrlp_funky_ruby_requires = 1
<

					*'g:ctrlp_funky_ruby_classes'*
Set this to 1 (enabled) the results will include class definitions.
(default: 1)
>
	let g:ctrlp_funky_ruby_classes = 0
<

					*'g:ctrlp_funky_ruby_modules'*
Set this to 1 (enabled) the results will include module definitions.
(default: 1)
>
	let g:ctrlp_funky_ruby_modules = 0
<

					*'g:ctrlp_funky_ruby_contains_rake'*
This option is no longer available. Use |g:ctrlp_funky_ruby_rake_words|
instead. [OBSOLETE]

					*'g:ctrlp_funky_ruby_rake_words*
Set this to 1 (enabled) 'rake' filter will be absorbed.
(default: 0)
>
	let g:ctrlp_funky_ruby_rake_words = 1
<

					*'g:ctrlp_funky_ruby_chef_words'*
Set this to 1 (enabled) 'chef' filter will be absorbed.
(default: 0)
>
	let g:ctrlp_funky_ruby_chef_words = 1
<

					*'g:ctrlp_funky_ruby_access'*
Set this to 1 (enabled) the result will be included access modifiers such as
private, protected and public.
(default: 1)
>
	let g:ctrlp_funky_ruby_chef_words = 1
<
[sh]					*ctrlp-funky-sh*
					*'g:ctrlp_funky_sh_type*
In most of the case, '/bin/sh' is an alias (symlink) of an other shell such as
bash, ksh etc nowadays. You can specify the Funky's internal filetype for 'sh'.
If this is set to 'dash', the Funky treats 'sh' as 'dash'.
(default: 'bash')
>
	let g:ctrlp_funky_sh_type = 'ksh'
<

FILTER IMPLEMENTATION GUIDE			*ctrlp-funky-filter-guide*
This section describes how to implement your own filter.
The internal API has been changed since |ctrlp-funky| version 0.6.0.
Therefore, if the filter uses old API you may get an error.

						*ctrlp-funky-api-v0.6.0*
						*ctrlp-funky-create-own-filter*
The filtype filter must have an |autoload| function named 'filters'.
This 'filters' function must return a |List| which contains |Dictionaries|.
And each |Dictionary| must have 'pattern' and 'formatter' as keys.

This is a filter for filetype 'vim'.
>
  function! ctrlp#funky#vim#filters()
    let filters = [
          \ { 'pattern': '\m\C^[\t ]*function!\?[\t ]\+\S\+',
          \   'formatter': ['\m\C^[\t ]*', '', ''] }
    \ ]

    " You can highlight whatever in the ctrlp.vim window if you want
    call ctrlp#funky#highlight('^[\t ]*function[\t ]',
                             \ 'CtrlPFunkyVimFunc', 'Function')

    return filters
  endfunction
<
[Meaning of the filter's keys]
String	pattern~
  This is a regexp to extract function definitions.

List	formatter~
  |ctrlp-funky| formats each line that extracted from current buffer using
  values of this item. Actually, these items are simply assigned as arguments
  for |substitute()| function.
  The sample function above removes leading whitespaces.


==============================================================================
THANKS						*ctrlp-funky-thanks*

  * *kien* <http://github.com/kien> - the author of ctrlp.vim

  * *pydave*      <https://github.com/pydave>
  * *curist*      <https://github.com/curist>
  * *Benoit*      <https://github.com/saalaa>
  * *tokorom*     <https://github.com/tokorom>
  * *robmiller*   <https://github.com/robmiller>
  * *unc0*        <https://github.com/unc0>
  * *hlissner*    <https://github.com/hlissner>
  * *mephux*      <https://github.com/mephux>
  * *dusans*      <https://github.com/dusans>
  * *kirstein*    <https://github.com/kirstein>
  * *mmazer*      <https://github.com/mmazer>
  * *vitalk*      <https://github.com/vitalk>
  * *dingmingxin* <https://github.com/dingmingxin>


==============================================================================
CHANGELOG 					*ctrlp-funky-changelog*


22 Apr 2014~
  + Add support for returning by reference function for PHP (#31)
    by |dingmingxin|

20 Apr 2014~
  + 0.8.4: Fix performance issue for python (#30)
    by |dusans|

10 Mar 2014~
  + 0.8.3: Add Jinja template support. (#29)
    by |vitalk|

22 Feb 2014~
  + 0.8.2: Add html and xhtml support. (#28)
    by |mmazer|

26 Jan 2014~
  + 0.8.1: Add syntax highlight option: |g:ctrlp_funky_syntax_highlight|
           An idea from issue #25.

22 Jan 2014~
  + 0.8.0: Add ability to custom highlight

27 Nov 2013~
  + 0.7.1: Remove the old API

9 Nov 2013~
  + 0.7.0: Add coffee-script support. (#23)
    by |kirstein|

16 Oct 2013~
  + Add post_extract_hook support
  + Fix java: remove 'else if' from the list

15 Oct 2013~
  + Fix javascript: 1 character function name isn't detected problem

8 Oct 2013~
  + Add Go support
  + Add Perl support

4 Oct 2013~
  + Change internal API, though the old API still supported.

7 Sept 2013~
  + Add MRU feature: |g:ctrlp_funky_sort_by_mru|
  + Add YAML support. (#20)
    by |dusans|

30 Aug 2013~
  + Add javascript object function support. (#17)
    by |mephux|

27 Aug 2013~
  + Fix "Pattern not found" line appears in the list

15 Aug 2013~
  + Add support for Lua
    by |hlissner|

9 Aug 2013~
  + New option: |g:ctrlp_funky_sh_type|

25 Jun 2013~
  + Fix behaviour when buffer being opened in multiple (split) windows (#11)
  + Add multi-lined function def support in Python (#12)

17 Jun 2013~
  + Add C support, improved C++ pattern.
    by |unc0|

23 May 2013~
  + Fix regex pattern for sh. No parentheses case can be detected.

20 May 2013~
  + New options: |g:ctrlp_funky_php_requires|,
                 |g:ctrlp_funky_php_includes|,

2 May 2013~
  + Add support for php
    by |robmiller|

25 Apr 2013~
  + New options: |g:ctrlp_funky_chef_custom_resources|
                 |g:ctrlp_funky_chef_lwrp|

20 Apr 2013~
  + Add support for Chef recipe

11 Apr 2013~
  + Fix regexp pattern for sh

3 Apr 2013~
  + Add support for Visual Basic (vb)

22 Mar 2013~
  + Add the command can take an argument for initialisation

12 Feb 2013~
  + Add 'get_filter' method in each filter to disclose own filter
  + Add support for Objective-C (objc)
    by |tokorom|

27 Jan 2013~
  + Add support for Shell Script (bash)
  + Add support for Z shell (zsh)
  - Delete all buffer mode

21 Jan 2013~

  + New options: |g:ctrlp_funky_ruby_requires|,
                 |g:ctrlp_funky_ruby_classes|,
                 |g:ctrlp_funky_ruby_modules|,
                 |g:ctrlp_funky_ruby_contains_rake|

20 Jan 2013~
  + Add class filter for python
    by |Benoit|

14 Jan 2013~
  + Add support for javascript
    by |curist|

06 Jun 2012~
  + Add support for python
  + Add support for C++ (cpp)
  + Add support for java
    by |pydave|

Initial release: 25 Feb 2012~


==============================================================================
LICENSE						*ctrlp-funky-license*

|ctrlp-funky| is distributed under the MIT License.

Copyright (c) 2012-2014 Takahiro Yoshihara

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


==============================================================================
ABOUT                                           *ctrlp-funky-about*

The latest version is available on GitHub:

https://github.com/tacahiroy/ctrlp-funky


vim:fen:tw=78:et:ts=8:ft=help:norl:
